// ##############################################################
// REQUIRE MODULES
// ##############################################################
const usersModel = require("../models/usersModel");

// ##############################################################
// DEFINE CONTROLLER FUNCTION TO CREATE USER
// ##############################################################
/*
 - Controller to create a new user.
 - Validates the request body, checks if the username already exists,
   and inserts a new user into the database.
*/
module.exports.createNewUser = (req,res, next) => {
    // Validate the request body
        if(req.body.username == undefined)
        {
            return res.status(400).json({ 
                "message": "Missing username." });
        }
        const username = req.body.username;

        // Check if the username already exists
        usersModel.checkUsernameExists(username, (error, results) => {
            if (error) {
                console.error("Internal server error", error);
                return res.status(500).json({
                    "message": "Internal server error",
                    "error": error
                });
            }
    
            if (results.length > 0) {
                // Username already exists
                return res.status(409).json({
                    "message": "Username already taken."
                });
            }

        //Prepare data for new user creation
        const data = {
            username: req.body.username,
            skillpoints: 0 //Default skillpoints value
        };

        //Callback function for database operation
        const callback = (error, results, fields) => {
            if (error) {
                console.error("Internal server error", error);
                return res.status(500).json({ "message": "Internal server error", 
                    "error": error
                });
            } else {
                //Respond with the created user's details
                return res.status(201).json({ 
                    "user_id": results.insertId,  // The ID generated by MySQL
                    "username": data.username,
                    "skillpoints": data.skillpoints
                });
            }
        };

        //Call the model to create the user
        usersModel.createUser(data, callback);
    });
};

// ##############################################################
// DEFINE CONTROLLER FUNCTION TO READ ALL USERS
// ##############################################################
/*
 - Controller to fetch all users from the database.
*/
module.exports.readAllUser = (req, res, next) => {
        //Callback function for database operation
        const callback = (error, results) => {
            if (error) {
                console.error("Error readAllPlayer:", error);
                res.status(500).json(error);
            } 
            else res.status(200).json(results);
        }
    
        //Call the model to fetch all users
        usersModel.selectAll(callback);
    };

// ##############################################################
// DEFINE CONTROLLER FUNCTION TO READ USER BY ID
// ##############################################################
/*
 - Controller to fetch all users from the database.
*/
module.exports.readUserById = (req, res, next) => {
    const data = {
        user_id: req.params.user_id
    }

    const callback = (error, results, fields) => {
        if (error) {
            console.error("Error readUserById:", error);
            res.status(500).json(error);
        } else {
            if(results.length == 0) 
            {
                res.status(404).json({
                    message: "User not found"
                });
            }
            else res.status(200).json(results[0]);
        }
    }

    //Call the model to fetch all users
    usersModel.selectById(data,callback);
};

// ##############################################################
// DEFINE CONTROLLER FUNCTION FOR UPDATE USER BY ID
// ##############################################################
/*
 - Controller to update user details by user_id.
 - Checks if the username exists and updates the user's details.
*/
module.exports.updateUserById = (req, res, next) => {
    // Validate the request body
    if (req.body.username === undefined) {
        return res.status(400).json({
            "message": "Missing username."
        });
    }
    const username = req.body.username;
    const user_id = req.params.user_id; // Get user ID from URL

    // Check if the username already exists
    usersModel.checkUsernameExists(username, (error, results) => {
        if (error) {
            console.error("Internal server error", error);
            return res.status(500).json({
                "message": "Internal server error",
                "error": error
            });
        }

        if (results.length > 0) {
            // Username already exists
            return res.status(409).json({
                "message": "Username already taken."
            });
        }

        // Prepare the data for the update
        const data = {
            user_id: user_id, // Pass user_id to the model
            username: req.body.username,
            email: req.body.email
        };

        //Callback function for database operation
        const callback = (error, results) => {
            if (error) {
                console.error("Internal server error", error);
                return res.status(500).json({
                    "message": "Internal server error",
                    "error": error
                });
            }

            // If no rows were affected, the user doesn't exist
            if (results.affectedRows === 0) {
                return res.status(404).json({
                    "message": "Requested user_id does not exist."
                });
            }

            // Return the updated user data
            return res.status(200).json({
                "user_id": user_id,
                "username": data.username,
                "skillpoints": data.skillpoints
            });
        };

        // Call the model to update the user
        usersModel.updateById(data, callback);
    });
};

//////////////////////////////////////////////////////
// CONTROLLER FOR LOGIN
//////////////////////////////////////////////////////
module.exports.login = (req,res, next)=>{
    const data = {
        username: req.body.username,
        password: req.body.password
    }
    if(data.username==undefined || data.password ==undefined){
        res.status(404).json({
            message: "Username or password not filled up"
        })
    };
    const callback=(error, results)=>{
        if(error){
            console.error('Error in login:', error);
        return res.status(500).json({ message: 'Database error.' });
        }else{
            if(results.length == 0){
                res.status(404).json({
                    message: "User not found"
                })
            }else{
                res.locals.user = results[0];
                res.locals.hash = results[0].password;
                next();
            }
        }
    }
    usersModel.selectByUsername(data, callback);
}

//////////////////////////////////////////////////////
// CONTROLLER FOR REGISTER
//////////////////////////////////////////////////////
module.exports.register = (req, res, next) => {
    const data = {
      username: req.body.username,
      email: req.body.email,
      hashedPassword: res.locals.hash,
    };
  
    const callback = (error, results) => {
      if (error) {
        console.error('Error in register:', error);
        return res.status(500).json({ message: 'Database error.' });
      }
  
      res.locals.userId = results.insertId; 
      res.locals.message = `User ${data.username} created successfully.`
      next(); 
    };
  
    usersModel.createUser(data, callback);
  };
  //////////////////////////////////////////////////////
// MIDDLEWARE FOR CHECK IF USERNAME OR EMAIL EXISTS
//////////////////////////////////////////////////////
module.exports.checkUsernameOrEmailExist = (req, res, next) => {
    const data = {
        username: req.body.username,
        email: req.body.email
    };
    const callback = (error, results) => {
        if (error) {
            console.error("Error checkUsernameOrEmailExist:", error);
            return res.status(500).json(error);
        } else {
            if (results.length === 0) {
                return next(); // Continue if no existing username/email
            } else {
                return res.status(409).json({
                    message: "Username or email already exists"
                });
            }
        }
    };
    usersModel.selectByUsernameOrEmail(data, callback);
};
